using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Reflection;
using System.Text.RegularExpressions;

namespace Tator.SpudConf
{
    public static class ConfigLoader
    {
        private static Dictionary<string, Regex> regexes = new Dictionary<string, Regex>() 
        { 
            { "comment", new Regex(@"^\s*#(?<comment>.*?)$") },
            { "metadata", new Regex(@"^\s*#!\s*(?<key>.+?)\s*=\s+""(?<value>.+?)""\s*$") },
            { "value", new Regex(@"^\s*(?<key>.+?)\s*=\s*""(?<value>.+?)""\s*$") },
            { "whitespace", new Regex(@"^\s*$") }
        };

        public static void Load(Config config, Stream stream)
        {
            if (config == null)
                throw new ArgumentNullException("config");
            if (stream == null)
                throw new ArgumentNullException("stream");
            Match ma;
            var currentMetadata = new Dictionary<string, string>();
            var currentComments = new List<string>();
            string line;
            using (var bs = new BufferedStream(stream))
            {
                using (var sr = new StreamReader(bs))
                {
                    while (!sr.EndOfStream)
                    {
                        line = sr.ReadLine();
                        if ((ma = regexes["metadata"].Match(line)).Success)
                        {
                            currentMetadata.Add(ma.Groups["key"].Value.Trim(), ma.Groups["value"].Value);
                        }
                        else if ((ma = regexes["comment"].Match(line)).Success)
                        {
                            currentComments.Add(ma.Groups["comment"].Value);
                        }
                        else if ((ma = regexes["value"].Match(line)).Success)
                        {
                            ConfigNode node = new ConfigNode(ma.Groups["value"].Value);
                            foreach (var m in currentMetadata)
                            {
                                node.Metadata.Add(m.Key, m.Value);
                            }
                            foreach (var c in currentComments)
                            {
                                node.Comments.Add(c);
                            }
                            currentMetadata.Clear();
                            currentComments.Clear();
                            config.Add(ma.Groups["key"].Value.Trim(), node);
                        }
                        else if (regexes["whitespace"].Match(line).Success)
                        {
                            continue;
                        }
                        else
                        {
                            throw new InvalidDataException("Invalid config format");
                        }
                    }
                }
            }
        }

        public static void Generate(Config config, Stream stream)
        {
            if (config == null)
                throw new ArgumentNullException("config");
            using (var bs = new BufferedStream(stream))
            {
                using (var sw = new StreamWriter(bs))
                {
                    sw.WriteLine("# Generated by SpudConf {0}", Assembly.GetExecutingAssembly().GetName().Version);
                    sw.WriteLine(@"#! author = ""{0}""", Properties.Settings.Default.UserName);
                    sw.WriteLine(@"#! date = ""{0}""", DateTime.Now.ToFileTimeUtc());
                    foreach (var c in config)
                    {
                        foreach (var co in c.Value.Comments)
                        {
                            sw.WriteLine("#{0}", co);
                        }
                        foreach (var m in c.Value.Metadata)
                        {
                            sw.WriteLine("#!{0} = \"{1}\"", m.Key, m.Value);
                        }
                        sw.WriteLine("{0} = \"{1}\"", c.Key, c.Value.Value);
                    }
                }
            }
        }

        public static ChangeSet GenerateChangeSet(Config oldConfig, Config newConfig)
        {
            var cs = new ChangeSet();
            foreach (var n in oldConfig)
            {
                var oldKey = n.Key;
                if (newConfig.ContainsKey(oldKey))
                {
                    var newNode = newConfig[oldKey];
                    if (n.Value != newNode)
                    {
                        cs.Add(new ConfigChange() { Type = ChangeType.Modified, Key = oldKey, Old = n.Value, New = newNode });
                    }
                }
                else
                {
                    cs.Add(new ConfigChange() { Type = ChangeType.Removed, Key = oldKey, Old = n.Value, New = null });
                }
            }
            foreach (var n in newConfig)
            {
                var newKey = n.Key;
                if (!oldConfig.ContainsKey(newKey))
                {
                    cs.Add(new ConfigChange() { Type = ChangeType.Added, Key = newKey, Old = null, New = newConfig[newKey] });
                }
            }
            return cs;
        }

        public static void Save(Config config, Stream stream)
        {

        }
    }
}
